lexer grammar lab_8_2; 

JSON: '{' '\r'? JSON_TEXT+
 '}'{System.out.println("matching rule:" + getText());};

JSON_TEXT: EMAIL | DATE | PHONE | CREDITCARD | ADDRESS; 


fragment EMAIL: '"EMAIL":' ' '? '"' TEXT_EMAIL '"' ','?;
fragment DATE: '"DATE":' ' '? '"' TEXT_DATE '"' ','?;
fragment PHONE: '"PHONE":' ' '? '"' TEXT_PHONE '"' ','?;
fragment CREDITCARD: '"CREDITCARD":' ' '? '"' TEXT_CREDITCARD '"' ','?;
fragment ADDRESS: '"ADDRESS":' ' '? '"' TEXT_ADDRESS '"' ','?;

TEXT_EMAIL: EMAIL_CHAR+ '@' EMAIL_CHAR+ '.' EMAIL_CHAR+;
EMAIL_CHAR: [a-zA-Z0-9-_~!$&'()*+,;=:.]+;

TEXT_DATE: DAY '/' MONTH '/' YEAR;
DAY: ('0' | '1' | '2' | '3') NUM;
MONTH: ('0' | '1') NUM;
YEAR: '2' ('0' | '1') NUM NUM;

NUM: [0-9];

TEXT_PHONE: (PHONE_SPACES | PHONE_DOTS | PHONE_DASH | PHONE_PAREN);
PHONE_SPACES: NUM NUM NUM ' ' NUM NUM NUM ' ' NUM NUM NUM NUM;
PHONE_DOTS: NUM NUM NUM '.' NUM NUM NUM '.' NUM NUM NUM NUM;
PHONE_DASH: NUM NUM NUM '-' NUM NUM NUM '-' NUM NUM NUM NUM;
PHONE_PAREN: '(' NUM NUM NUM ')' NUM NUM NUM '-' NUM NUM NUM NUM;

TEXT_CREDITCARD: VISA | MASTERCARD | AMEX | DINERS | DISCOVER | JCB;
VISA: '4' NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM (NUM NUM NUM)?;
MASTERCARD: '5' [1-5] NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM;
AMEX: '3' ('4' | '7') NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM ; 
DINERS: (([300-305] | '36'NUM | '38'NUM) NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM | '5' NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM);
DISCOVER: ('6011' | '65' NUM NUM) NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM;
JCB: (('2131' | '1800') NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM | '35' NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM NUM);

TEXT_ADDRESS: [a-zA-Z0-9-_~!$&'()*+,;=:. ]+;


WS: [ \r\t\n]+ {System.out.println("matching WS rule");skip();};

